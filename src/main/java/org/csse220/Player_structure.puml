@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "org.csse220.Player",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1070167022 { 
   	label=csse220
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Player374993180[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fuelCount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   health: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ attackedByEnemy()</TD></TR>
<TR><TD ALIGN="LEFT" >+ die()</TD></TR>
<TR><TD ALIGN="LEFT" >+ doPower()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByDrone()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByLethalEnemy()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onHitByBonfire()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSoftCollision(other: GameObject, pose: GamePose)</TD></TR>
<TR><TD ALIGN="LEFT" >+ pickUpFuel()</TD></TR>
<TR><TD ALIGN="LEFT" >+ reset()</TD></TR>
<TR><TD ALIGN="LEFT" >- trySleep(millis: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(dt: double)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

subgraph cluster_1094030033 { 
   	label=game_engine
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Bonfire1930825200[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Bonfire</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ onSolidCollision(other: GameObject, moveDirection: GamePose)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BonfireFuel1930825200[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BonfireFuel</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   isHidden: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ blocksMovement(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteSelf()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByPlayer()</TD></TR>
<TR><TD ALIGN="LEFT" >+ reset()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CameraPose1300584399[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CameraPose</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   pitch: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ pitch(): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Collideable286411639[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Collideable</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ hasCollided(other: Collideable): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CuboidTerrain1930825200[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CuboidTerrain</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Drawable466718516[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Drawable</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   color: Color [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ draw(camPose: Vector3d, pitch: double, yaw: double, shade: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ElapsedTime2106046683[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ElapsedTime</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   timestamp: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ reset()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Enemy795216083[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Enemy</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Engine2106046683[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Engine</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   kinematics: Kinematics [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   levelNumber: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   levels: ArrayList&lt;Level&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: GamePlayer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   soundPlayer: SoundPlayer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addEventManager(runnable: Runnable)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addGameObject(gameObject: GameObject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addLevel(level: Level)</TD></TR>
<TR><TD ALIGN="LEFT" >- addLevelData(level: Level)</TD></TR>
<TR><TD ALIGN="LEFT" >+ downOneLevel()</TD></TR>
<TR><TD ALIGN="LEFT" >+ init(player: GamePlayer, window: JFrame)</TD></TR>
<TR><TD ALIGN="LEFT" >+ keyPressed(keycode: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- kill()</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeGameObject(gameObject: GameObject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >+ resetLevel()</TD></TR>
<TR><TD ALIGN="LEFT" >+ startKinematics()</TD></TR>
<TR><TD ALIGN="LEFT" >+ upOneLevel()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GameObject2106046683[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameObject</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   collideable: Collideable [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   drawable: Drawable [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   relativeCollideablePose: GamePose [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   relativeDrawablePose: GamePose [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   yaw: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ blocksMovement(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByDrone()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByLethalEnemy()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByPlayer()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByTrampoline()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByWater()</TD></TR>
<TR><TD ALIGN="LEFT" >+ incrementYaw(increment: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ move(moveDirection: GamePose, dt: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onHitByBonfire()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSoftCollision(other: GameObject, moveDirection: GamePose)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSolidCollision(other: GameObject, moveDirection: GamePose)</TD></TR>
<TR><TD ALIGN="LEFT" >+ pickUpFuel()</TD></TR>
<TR><TD ALIGN="LEFT" >+ reset()</TD></TR>
<TR><TD ALIGN="LEFT" >+ yaw(): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GamePlayer795216083[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GamePlayer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ doPower()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GamePose1300584399[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GamePose</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   yaw: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addTo(pose: GamePose): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ between(first: GamePose, second: GamePose): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ ceil(precision: int): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ dot(other: GamePose): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ floor(precision: int): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ normalize(): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativeTo(pose: GamePose): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ rotateYaw(yaw: double): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ round(precisionVector: GamePose): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ round(precision: int): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ scale(scalar: double): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ setYaw(yaw: double): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ toPoint3d(): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translate(vector: Vector3d): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ translate(x: double, y: double, z: double): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateX(x: double): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateY(y: double): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateZ(z: double): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ yaw(): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GrassBlock1930825200[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GrassBlock</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

KillableThread2106046683[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)KillableThread</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   active: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># activate()</TD></TR>
<TR><TD ALIGN="LEFT" ># kill()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Kinematics286411639[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Kinematics</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   CAMERA_OFFSET: GamePose [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   backgroundColor: Color [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   collideables: Set&lt;GameObject&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   drawables: Set&lt;Drawable&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   elementMoveSteps: GamePose[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   eventManagers: Set&lt;Runnable&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   fpsTimer: ElapsedTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   frames: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gameKeyListener: GameKeyListener [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gameObjects: Set&lt;GameObject&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: GamePlayer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   spectateMode: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timer: ElapsedTime [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addEventManager(runnable: Runnable)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addGameObject(gameObject: GameObject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ clearAllGameObjects()</TD></TR>
<TR><TD ALIGN="LEFT" >+ keyPressed(keycode: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeGameObject(gameObject: GameObject)</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(dt: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
<TR><TD ALIGN="LEFT" >+ start()</TD></TR>
<TR><TD ALIGN="LEFT" >- updateCameraPosition(dt: double)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Lava795216083[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Lava</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

LethalEnemy795216083[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)LethalEnemy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ blocksMovement(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSoftCollision(other: GameObject, moveDirection: GamePose)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MovingObject2106046683[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MovingObject</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   gravity: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lastPose: GamePose [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lastTranslation: GamePose [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   velocity: GamePose [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># lastPose(): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ move(moveDirection: GamePose, dt: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(dt: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ velocity(): GamePose</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PaperAirplane795216083[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PaperAirplane</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   timer: ElapsedTime [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ blocksMovement(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByPlayer()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hitByWater()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSoftCollision(other: GameObject, pose: GamePose)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(dt: double)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PathEnemy795216083[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PathEnemy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   endPose: GamePose [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nextVel: GamePose [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   startPose: GamePose [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ update(dt: double)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Point3d466718516[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Point3d</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   relativePose: Vector3d [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ calculateRelativePosition()</TD></TR>
<TR><TD ALIGN="LEFT" >- precisionRound(num: double, precision: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ project(): ProjectedPoint</TD></TR>
<TR><TD ALIGN="LEFT" >+ project(relX: double, relY: double, relZ: double): ProjectedPoint</TD></TR>
<TR><TD ALIGN="LEFT" >+ projectionConstant(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativePose(): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativeTo(other: Point3d): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativeTo(other: GamePose): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativeX(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativeY(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativeZ(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ translate(x: double, y: double, z: double): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translate(translation: Vector3d): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateX(x: double): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateY(y: double): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateZ(z: double): Point3d</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Screen466718516[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Screen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   PIXEL_SIZE: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   buffer: Color[][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   font: Font [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   pixels: Color[][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   squareScreenWidth: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   textBuffer: ArrayList&lt;Text&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ fill(color: Color)</TD></TR>
<TR><TD ALIGN="LEFT" ># paintComponent(g: Graphics)</TD></TR>
<TR><TD ALIGN="LEFT" >+ paintPixel(x: int, y: int, color: Color)</TD></TR>
<TR><TD ALIGN="LEFT" >+ refresh()</TD></TR>
<TR><TD ALIGN="LEFT" >+ writeText(key: String, text: String, color: Color, x: int, y: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SolidGameObject2106046683[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SolidGameObject</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   touchingGround: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ hitByTrampoline()</TD></TR>
<TR><TD ALIGN="LEFT" >+ jump()</TD></TR>
<TR><TD ALIGN="LEFT" >+ move(moveDirection: GamePose, dt: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSolidCollision(other: GameObject, moveDirection: GamePose)</TD></TR>
<TR><TD ALIGN="LEFT" >+ touchingGround(): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SoundPlayer2106046683[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SoundPlayer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   backgroundSong: MiniPlayer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boingSound: MiniPlayer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   deathSound: MiniPlayer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gainFuelSound: MiniPlayer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deathSound()</TD></TR>
<TR><TD ALIGN="LEFT" >+ gainFuelSound()</TD></TR>
<TR><TD ALIGN="LEFT" >+ startBackground()</TD></TR>
<TR><TD ALIGN="LEFT" >+ trampolineSound()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Spike795216083[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Spike</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Trampoline1930825200[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Trampoline</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ blocksMovement(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSoftCollision(other: GameObject, moveDirection: GamePose)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Vector2d1300584399[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Vector2d</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   angle: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   magnitude: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   x: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   y: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ add(translation: Vector2d): Vector2d</TD></TR>
<TR><TD ALIGN="LEFT" >+ angleBetween(other: Vector2d): double</TD></TR>
<TR><TD ALIGN="LEFT" >- calculateAngle(x: double, y: double): double</TD></TR>
<TR><TD ALIGN="LEFT" >- calculateMagnitude(x: double, y: double): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ distanceTo(vector: Vector2d): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ dot(other: Vector2d): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ interpolate(x1: double, y1: double, x2: double, y2: double, x: double): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ multiply(scalar: double): Vector2d</TD></TR>
<TR><TD ALIGN="LEFT" >+ normalize(): Vector2d</TD></TR>
<TR><TD ALIGN="LEFT" >+ rotate(angle: double): Vector2d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translate(x: double, y: double): Vector2d</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Vector3d1300584399[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Vector3d</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   magnitude: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   z: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addTo(vector: Vector3d): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ angleBetween(vector: Vector3d): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ cross(vector: Vector3d): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ distanceTo(point: Vector3d): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ dot(vector: Vector3d): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ magnitude(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ relativeTo(vector: Vector3d): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ rotatePitch(center: Vector3d, pitch: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ rotatePitchYaw(vector: Vector3d): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ rotatePitchYaw(pitch: double, yaw: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ rotateYaw(center: Vector3d, yaw: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ rotateYaw(yaw: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ round(precision: int): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ scale(scalar: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ toGamePose(): GamePose</TD></TR>
<TR><TD ALIGN="LEFT" >+ toPoint3d(): Point3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translate(translation: Vector3d): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translate(x: double, y: double, z: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateX(x: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateY(y: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ translateZ(z: double): Vector3d</TD></TR>
<TR><TD ALIGN="LEFT" >+ updatePitchYaw(camPitch: double, camYaw: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ x(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ y(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ z(): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Water1930825200[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Water</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ blocksMovement(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- kill()</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSoftCollision(other: GameObject, moveDirection: GamePose)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(dt: double)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
BonfireFuel1930825200 -> SoundPlayer2106046683[label="hitByPlayer() -> gainFuelSound()"];
Enemy795216083 -> LethalEnemy795216083[arrowhead=none, arrowtail=empty, dir=both];
Enemy795216083 -> PaperAirplane795216083[arrowhead=none, arrowtail=empty, dir=both];
Engine2106046683 -> GamePlayer795216083[label="player
[0..1]"];
Engine2106046683 -> Kinematics286411639[label="kinematics
[0..1]"];
GameObject2106046683 -> Bonfire1930825200[arrowhead=none, arrowtail=empty, dir=both];
GameObject2106046683 -> BonfireFuel1930825200[arrowhead=none, arrowtail=empty, dir=both];
GameObject2106046683 -> Collideable286411639[label="collideable
[0..1]"];
GameObject2106046683 -> CuboidTerrain1930825200[arrowhead=none, arrowtail=empty, dir=both];
GameObject2106046683 -> Drawable466718516[label="drawable
[0..1]"];
GameObject2106046683 -> Enemy795216083[arrowhead=none, arrowtail=empty, dir=both];
GameObject2106046683 -> GamePose1300584399[label="relativeCollideablePose
[0..1]"];
GameObject2106046683 -> GamePose1300584399[label="relativeDrawablePose
[0..1]"];
GameObject2106046683 -> GrassBlock1930825200[arrowhead=none, arrowtail=empty, dir=both];
GameObject2106046683 -> SolidGameObject2106046683[arrowhead=none, arrowtail=empty, dir=both];
GameObject2106046683 -> Trampoline1930825200[arrowhead=none, arrowtail=empty, dir=both];
GameObject2106046683 -> Water1930825200[arrowhead=none, arrowtail=empty, dir=both];
GamePlayer795216083 -> Player374993180[arrowhead=none, arrowtail=empty, dir=both];
GamePose1300584399 -> CameraPose1300584399[arrowhead=none, arrowtail=empty, dir=both];
KillableThread2106046683 -> Kinematics286411639[arrowhead=none, arrowtail=empty, dir=both];
Kinematics286411639 -> GamePlayer795216083[label="player
[0..1]"];
LethalEnemy795216083 -> GameObject2106046683[label="onSoftCollision() -> hitByLethalEnemy()"];
LethalEnemy795216083 -> Lava795216083[arrowhead=none, arrowtail=empty, dir=both];
LethalEnemy795216083 -> PathEnemy795216083[arrowhead=none, arrowtail=empty, dir=both];
LethalEnemy795216083 -> Spike795216083[arrowhead=none, arrowtail=empty, dir=both];
MovingObject2106046683 -> GameObject2106046683[arrowhead=none, arrowtail=empty, dir=both];
PaperAirplane795216083 -> ElapsedTime2106046683[label="timer
[0..1]"];
PaperAirplane795216083 -> GameObject2106046683[label="onSoftCollision() -> hitByDrone()"];
PaperAirplane795216083 -> MovingObject2106046683[label="update() -> update()"];
Player374993180 -> GameObject2106046683[label="onSoftCollision() -> hitByPlayer()"];
Player374993180 -> SoundPlayer2106046683[label="die() -> deathSound()"];
SolidGameObject2106046683 -> Collideable286411639[label="onSolidCollision() -> hasCollided()"];
SolidGameObject2106046683 -> GamePlayer795216083[arrowhead=none, arrowtail=empty, dir=both];
SolidGameObject2106046683 -> SoundPlayer2106046683[label="hitByTrampoline() -> trampolineSound()"];
Vector2d1300584399 -> Vector3d1300584399[arrowhead=none, arrowtail=empty, dir=both];
Vector3d1300584399 -> GamePose1300584399[arrowhead=none, arrowtail=empty, dir=both];
Vector3d1300584399 -> Point3d466718516[arrowhead=none, arrowtail=empty, dir=both];
Water1930825200 -> Engine2106046683[label="kill() -> removeGameObject()"];
Water1930825200 -> Vector3d1300584399[label="update() -> z()"];
    
}
@enduml